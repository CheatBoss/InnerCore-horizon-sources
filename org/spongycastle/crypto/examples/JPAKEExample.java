package org.spongycastle.crypto.examples;

import java.math.*;
import org.spongycastle.crypto.digests.*;
import java.security.*;
import java.io.*;
import org.spongycastle.crypto.agreement.jpake.*;
import org.spongycastle.crypto.*;

public class JPAKEExample
{
    private static BigInteger deriveSessionKey(final BigInteger bigInteger) {
        final SHA256Digest sha256Digest = new SHA256Digest();
        final byte[] byteArray = bigInteger.toByteArray();
        final byte[] array = new byte[sha256Digest.getDigestSize()];
        sha256Digest.update(byteArray, 0, byteArray.length);
        sha256Digest.doFinal(array, 0);
        return new BigInteger(array);
    }
    
    public static void main(final String[] array) throws CryptoException {
        final JPAKEPrimeOrderGroup nist_3072 = JPAKEPrimeOrderGroups.NIST_3072;
        final BigInteger p = nist_3072.getP();
        final BigInteger q = nist_3072.getQ();
        final BigInteger g = nist_3072.getG();
        System.out.println("********* Initialization **********");
        System.out.println("Public parameters for the cyclic group:");
        final PrintStream out = System.out;
        final StringBuilder sb = new StringBuilder();
        sb.append("p (");
        sb.append(p.bitLength());
        sb.append(" bits): ");
        sb.append(p.toString(16));
        out.println(sb.toString());
        final PrintStream out2 = System.out;
        final StringBuilder sb2 = new StringBuilder();
        sb2.append("q (");
        sb2.append(q.bitLength());
        sb2.append(" bits): ");
        sb2.append(q.toString(16));
        out2.println(sb2.toString());
        final PrintStream out3 = System.out;
        final StringBuilder sb3 = new StringBuilder();
        sb3.append("g (");
        sb3.append(p.bitLength());
        sb3.append(" bits): ");
        sb3.append(g.toString(16));
        out3.println(sb3.toString());
        final PrintStream out4 = System.out;
        final StringBuilder sb4 = new StringBuilder();
        sb4.append("p mod q = ");
        sb4.append(p.mod(q).toString(16));
        out4.println(sb4.toString());
        final PrintStream out5 = System.out;
        final StringBuilder sb5 = new StringBuilder();
        sb5.append("g^{q} mod p = ");
        sb5.append(g.modPow(q, p).toString(16));
        out5.println(sb5.toString());
        System.out.println("");
        final PrintStream out6 = System.out;
        final StringBuilder sb6 = new StringBuilder();
        sb6.append("(Secret passwords used by Alice and Bob: \"");
        sb6.append("password");
        sb6.append("\" and \"");
        sb6.append("password");
        sb6.append("\")\n");
        out6.println(sb6.toString());
        final SHA256Digest sha256Digest = new SHA256Digest();
        final SecureRandom secureRandom = new SecureRandom();
        final JPAKEParticipant jpakeParticipant = new JPAKEParticipant("alice", "password".toCharArray(), nist_3072, sha256Digest, secureRandom);
        final JPAKEParticipant jpakeParticipant2 = new JPAKEParticipant("bob", "password".toCharArray(), nist_3072, sha256Digest, secureRandom);
        final JPAKERound1Payload round1PayloadToSend = jpakeParticipant.createRound1PayloadToSend();
        final JPAKERound1Payload round1PayloadToSend2 = jpakeParticipant2.createRound1PayloadToSend();
        System.out.println("************ Round 1 **************");
        System.out.println("Alice sends to Bob: ");
        final PrintStream out7 = System.out;
        final StringBuilder sb7 = new StringBuilder();
        sb7.append("g^{x1}=");
        sb7.append(round1PayloadToSend.getGx1().toString(16));
        out7.println(sb7.toString());
        final PrintStream out8 = System.out;
        final StringBuilder sb8 = new StringBuilder();
        sb8.append("g^{x2}=");
        sb8.append(round1PayloadToSend.getGx2().toString(16));
        out8.println(sb8.toString());
        final PrintStream out9 = System.out;
        final StringBuilder sb9 = new StringBuilder();
        sb9.append("KP{x1}={");
        sb9.append(round1PayloadToSend.getKnowledgeProofForX1()[0].toString(16));
        sb9.append("};{");
        sb9.append(round1PayloadToSend.getKnowledgeProofForX1()[1].toString(16));
        sb9.append("}");
        out9.println(sb9.toString());
        final PrintStream out10 = System.out;
        final StringBuilder sb10 = new StringBuilder();
        sb10.append("KP{x2}={");
        sb10.append(round1PayloadToSend.getKnowledgeProofForX2()[0].toString(16));
        sb10.append("};{");
        sb10.append(round1PayloadToSend.getKnowledgeProofForX2()[1].toString(16));
        sb10.append("}");
        out10.println(sb10.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice: ");
        final PrintStream out11 = System.out;
        final StringBuilder sb11 = new StringBuilder();
        sb11.append("g^{x3}=");
        sb11.append(round1PayloadToSend2.getGx1().toString(16));
        out11.println(sb11.toString());
        final PrintStream out12 = System.out;
        final StringBuilder sb12 = new StringBuilder();
        sb12.append("g^{x4}=");
        sb12.append(round1PayloadToSend2.getGx2().toString(16));
        out12.println(sb12.toString());
        final PrintStream out13 = System.out;
        final StringBuilder sb13 = new StringBuilder();
        sb13.append("KP{x3}={");
        sb13.append(round1PayloadToSend2.getKnowledgeProofForX1()[0].toString(16));
        sb13.append("};{");
        sb13.append(round1PayloadToSend2.getKnowledgeProofForX1()[1].toString(16));
        sb13.append("}");
        out13.println(sb13.toString());
        final PrintStream out14 = System.out;
        final StringBuilder sb14 = new StringBuilder();
        sb14.append("KP{x4}={");
        sb14.append(round1PayloadToSend2.getKnowledgeProofForX2()[0].toString(16));
        sb14.append("};{");
        sb14.append(round1PayloadToSend2.getKnowledgeProofForX2()[1].toString(16));
        sb14.append("}");
        out14.println(sb14.toString());
        System.out.println("");
        jpakeParticipant.validateRound1PayloadReceived(round1PayloadToSend2);
        System.out.println("Alice checks g^{x4}!=1: OK");
        System.out.println("Alice checks KP{x3}: OK");
        System.out.println("Alice checks KP{x4}: OK");
        System.out.println("");
        jpakeParticipant2.validateRound1PayloadReceived(round1PayloadToSend);
        System.out.println("Bob checks g^{x2}!=1: OK");
        System.out.println("Bob checks KP{x1},: OK");
        System.out.println("Bob checks KP{x2},: OK");
        System.out.println("");
        final JPAKERound2Payload round2PayloadToSend = jpakeParticipant.createRound2PayloadToSend();
        final JPAKERound2Payload round2PayloadToSend2 = jpakeParticipant2.createRound2PayloadToSend();
        System.out.println("************ Round 2 **************");
        System.out.println("Alice sends to Bob: ");
        final PrintStream out15 = System.out;
        final StringBuilder sb15 = new StringBuilder();
        sb15.append("A=");
        sb15.append(round2PayloadToSend.getA().toString(16));
        out15.println(sb15.toString());
        final PrintStream out16 = System.out;
        final StringBuilder sb16 = new StringBuilder();
        sb16.append("KP{x2*s}={");
        sb16.append(round2PayloadToSend.getKnowledgeProofForX2s()[0].toString(16));
        sb16.append("},{");
        sb16.append(round2PayloadToSend.getKnowledgeProofForX2s()[1].toString(16));
        sb16.append("}");
        out16.println(sb16.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice");
        final PrintStream out17 = System.out;
        final StringBuilder sb17 = new StringBuilder();
        sb17.append("B=");
        sb17.append(round2PayloadToSend2.getA().toString(16));
        out17.println(sb17.toString());
        final PrintStream out18 = System.out;
        final StringBuilder sb18 = new StringBuilder();
        sb18.append("KP{x4*s}={");
        sb18.append(round2PayloadToSend2.getKnowledgeProofForX2s()[0].toString(16));
        sb18.append("},{");
        sb18.append(round2PayloadToSend2.getKnowledgeProofForX2s()[1].toString(16));
        sb18.append("}");
        out18.println(sb18.toString());
        System.out.println("");
        jpakeParticipant.validateRound2PayloadReceived(round2PayloadToSend2);
        System.out.println("Alice checks KP{x4*s}: OK\n");
        jpakeParticipant2.validateRound2PayloadReceived(round2PayloadToSend);
        System.out.println("Bob checks KP{x2*s}: OK\n");
        final BigInteger calculateKeyingMaterial = jpakeParticipant.calculateKeyingMaterial();
        final BigInteger calculateKeyingMaterial2 = jpakeParticipant2.calculateKeyingMaterial();
        System.out.println("********* After round 2 ***********");
        final PrintStream out19 = System.out;
        final StringBuilder sb19 = new StringBuilder();
        sb19.append("Alice computes key material \t K=");
        sb19.append(calculateKeyingMaterial.toString(16));
        out19.println(sb19.toString());
        final PrintStream out20 = System.out;
        final StringBuilder sb20 = new StringBuilder();
        sb20.append("Bob computes key material \t K=");
        sb20.append(calculateKeyingMaterial2.toString(16));
        out20.println(sb20.toString());
        System.out.println();
        deriveSessionKey(calculateKeyingMaterial);
        deriveSessionKey(calculateKeyingMaterial2);
        final JPAKERound3Payload round3PayloadToSend = jpakeParticipant.createRound3PayloadToSend(calculateKeyingMaterial);
        final JPAKERound3Payload round3PayloadToSend2 = jpakeParticipant2.createRound3PayloadToSend(calculateKeyingMaterial2);
        System.out.println("************ Round 3 **************");
        System.out.println("Alice sends to Bob: ");
        final PrintStream out21 = System.out;
        final StringBuilder sb21 = new StringBuilder();
        sb21.append("MacTag=");
        sb21.append(round3PayloadToSend.getMacTag().toString(16));
        out21.println(sb21.toString());
        System.out.println("");
        System.out.println("Bob sends to Alice: ");
        final PrintStream out22 = System.out;
        final StringBuilder sb22 = new StringBuilder();
        sb22.append("MacTag=");
        sb22.append(round3PayloadToSend2.getMacTag().toString(16));
        out22.println(sb22.toString());
        System.out.println("");
        jpakeParticipant.validateRound3PayloadReceived(round3PayloadToSend2, calculateKeyingMaterial);
        System.out.println("Alice checks MacTag: OK\n");
        jpakeParticipant2.validateRound3PayloadReceived(round3PayloadToSend, calculateKeyingMaterial2);
        System.out.println("Bob checks MacTag: OK\n");
        System.out.println();
        System.out.println("MacTags validated, therefore the keying material matches.");
    }
}
